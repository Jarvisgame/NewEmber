# 数据处理相关
path: 
  data_dir: ./data #总数据目录
  output_dir: ./output #输出目录
  binary_files_dir: ./data/binary_files #二进制文件目录(用于3字节图像处理、字节直方图、字节熵直方图、PE静态文件结构特征提取、汇编码特征提取、函数调用关系图谱、字符串特征提取)

system_info:
  max_workers: 16 #最大工作线程数

three_gram_byte_plot:
  input_dir: ./data/binary_files #输入目录
  output_dir: ./output/three_gram_byte_plot #输出目录
  image_size: 128 #图像大小

pe_static_features:
  input_dir: ./data/binary_files #输入目录
  output_dir: ./output/pe_static_features #输出目录

decision_tree_classifier:
  pic_input_dir: ./output/three_gram_byte_plot #输入目录
  pic_output_dir: ./output/model/dt_model # 模型输出目录
  jsonl_input_dir: ./output/pe_static_features/pe_metadata #输入目录
  jsonl_output_dir: ./output/model/dt_model_jsonl # 模型输出目录
  test_size: 0.2 # 测试集比例
  random_state: 42 # 随机种子
  val_size: 0.1 # 验证集比例
  
random_forest_classifier:
  pic_input_dir: ./output/three_gram_byte_plot #输入目录
  pic_output_dir: ./output/model/rf_model # 模型输出目录
  # 作为训练集的 JSONL 根目录（建议指向你 pe_metadata 的输出目录）
  jsonl_input_dir: ./output/pe_static_features/pe_metadata
  # 模型输出目录
  jsonl_output_dir: ./output/model/rf_model_jsonl
  # 数据划分与随机种子
  test_size: 0.2
  val_size: 0.2
  random_state: 42
  # 森林中树的数量（一般 300~1000；更大更稳但更慢）
  n_estimators: 300
  # 树最大深度；null 表示不限制（更容易过拟合）。建议先 null，再看验证集表现
  max_depth:
  # 并行线程；-1 使用全部核心
  n_jobs: -1
  # 类不平衡处理：balanced_subsample | balanced | null
  class_weight: balanced_subsample
  # 每次分裂可用特征数：sqrt（高维较稳）| log2 | null(=全部)
  max_features: sqrt
  # 叶子节点最小样本数（>1 可抑制过拟合）
  min_samples_leaf: 1
  # 是否自助采样（袋外评估需为 true）
  bootstrap: true
  # 是否启用袋外评估（仅在 bootstrap: true 时有效）
  oob_score: false
  # 不纯度准则：gini | entropy | log_loss
  criterion: gini

  # f1：最大化 F1；youden：近似最大化 Youden 思路；pr_auc_hold：固定 0.5，仅计算 PR-AUC
  threshold_strategy: f1


svm_classifier:
  pic_input_dir: ./output/three_gram_byte_plot #输入目录
  pic_output_dir: ./output/model/svm_model # 模型输出目录
  # 作为训练集的 JSONL 根目录（指向 pe_metadata 输出目录）
  jsonl_input_dir: ./output/pe_static_features/pe_metadata
  # 模型输出目录
  jsonl_output_dir: ./output/model/svm_model_jsonl
  # ====== 划分与随机数 ======
  test_size: 0.2
  val_size: 0.2
  random_state: 42
  # SVM 超参数
  C: 1.0
  max_iter: 200
  kernel: linear
  # ====== MLP 超参 ======
  hidden_layer_sizes: [256, 128]   # 可调：如 [512,256,128]
  activation: relu                 # relu | tanh | logistic | identity
  solver: adam                     # adam | sgd | lbfgs
  alpha: 0.0001                    # L2 正则
  max_iter: 200
  batch_size: auto
  learning_rate: adaptive          # constant | invscaling | adaptive
  learning_rate_init: 0.001
  early_stopping: true             # 内部早停（会从训练集中再切一部分作为内部验证）
  validation_fraction: 0.1         # 仅在 early_stopping: true 时有效
  n_iter_no_change: 10
  tol: 0.0001
  shuffle: true
  beta_1: 0.9
  beta_2: 0.999
  epsilon: 1e-8
  # ====== 类不平衡处理 ======
  class_weight: balanced           # balanced | null
  # ====== 阈值调优策略（验证集） ======
  threshold_strategy: f1           # f1 | youden | pr_auc_hold

mlp_classifier:
  pic_input_dir: ./output/three_gram_byte_plot #输入目录
  pic_output_dir: ./output/model/mlp_model # 模型输出目录
  jsonl_input_dir: ./output/pe_static_features/pe_metadata
  jsonl_output_dir: ./output/model/mlp_model_jsonl
  test_size: 0.2
  random_state: 42
  hidden_layer_sizes: [256, 128]
  max_iter: 200
  alpha: 0.0001
  early_stopping: true
  validation_fraction: 0.1
  learning_rate: adaptive

cnn_classifier:
  pic_input_dir: ./output/three_gram_byte_plot # 输入目录
  pic_output_dir: ./output/model/cnn_model # 模型输出目录
  batch_size: 16 # 批处理大小
  epochs: 10 # 训练轮数
  lr: 0.001 # 学习率
  seed: 42 # 随机种子
  jsonl_input_dir: ./output/pe_static_features/pe_metadata
  jsonl_output_dir: ./output/model/cnn_model_jsonl
  batch_size: 64
  epochs: 20
  lr: 0.001
  test_size: 0.2
  random_state: 42
  num_workers: 4

ensemble_classifier:
  pic_input_dir: ./output/three_gram_byte_plot
  pic_output_dir: ./output/model/ensemble_model
  jsonl_input_dir: ./output/pe_static_features/pe_metadata
  jsonl_output_dir: ./output/model/ensemble_model_jsonl
  # ====== 划分与随机数 ======
  test_size: 0.2
  val_size: 0.2
  random_state: 42
  # ====== 阈值调优 ======
  # f1：最大化 F1；youden：近似 Youden；pr_auc_hold：固定 0.5 仅评估 PR-AUC
  threshold_strategy: f1

  # ====== Voting 权重（对应 [rf, svm, mlp]）======
  voting_weights: [2, 1, 1]

  rf:
    n_estimators: 300
    max_depth:
    max_features: sqrt
    min_samples_leaf: 1
    n_jobs: -1
    class_weight: balanced_subsample
    bootstrap: true
    criterion: gini

  svm:
    kernel: linear          # linear | rbf
    C: 1.0
    gamma: scale            # 仅 rbf 有效
    max_iter: 2000
    class_weight: balanced
    cache_size_mb: 1024

  mlp:
    hidden_layer_sizes: [256, 128]
    max_iter: 200
    alpha: 0.0001
    early_stopping: true
    validation_fraction: 0.1
    learning_rate: adaptive
    batch_size: auto
    learning_rate_init: 0.001